[{"content":"Have you ever wondered what is functional programming? This big buzz word everyone is talking about?\nWhat is Functional Programming? In Functional Programming everything is implemented using functions.\nFunctions are pieces of code which may receive some input value(parameters) and may return some output value.\nIn this case we have the say_hello function which has no parameters and no output value, this function prints to the screen \u0026ldquo;hello world\u0026rdquo;.\nRust Example:\nfn say_hello(){ println!(\u0026quot;hello world\u0026quot;); }  Haskell Example:\nsay_hello = putStrLn \u0026quot;hello world\u0026quot;  And in this case we have the function add_one which has an input value num of the type i32 and returns that value plus 1.\nRust Example:\nfn add_one(num:i32) -\u0026gt; i32{ return (num + 1); }  Haskell Example:\naddOne x = x+1  Why use Functional Programming? Functional programming is one of the simplest programming paradigms and in most cases it\u0026rsquo;s speed is unmatched by the other programming paradigms, such as Object Oriented Programming.\nThe implementations are often cleaner and more concise, and it allows the developers to think about a problem in other angle.\n","date":"2022-12-28","permalink":"https://psi-blog.github.io/post/functional_prg/","tags":["Rust","Programming","Haskell"],"title":"Functional Programming in Rust and Haskell"},{"content":"Today I was experimenting with Haskell and this error struck me:\n X Could not find Module Prelude\nThere are files missing in the base-x-x-x package,\n This has an easy fix:\nInstall the ghc-static package\nsudo pacman -S ghc-static  Then all should compile easily.\n","date":"2022-07-12","permalink":"https://psi-blog.github.io/post/prelude_ghc_fix/","tags":["Haskell","Fix","Programming"],"title":"X Could not find Module `Prelude` fix"},{"content":"Emacs is really a nice tool to work with if you are a developer or even a writer. It\u0026rsquo;s modes are incredibly versatile and never cease to amaze me.\nSome days ago I found myself in a conundrum, my Emacs config only supported one dictionary at a time.\nDictionary Plugins This dictionary plugins are really a life saver because they \u0026ldquo;lint\u0026rdquo; your text and help you find other words that are similar to the one you wrote incorrectly. Things that other code editors don\u0026rsquo;t have for writing $\\LaTeX$ or Markdown\nThis is very frustrating if you write school papers/essays in your home language and write something in other language.\nI would really take the effort of changing the dictionary language in my config every-time if there was no other way. But I\u0026rsquo;m a pro-programmer/procrastinator, and we are known for spending hours over-engineering solutions to very simple problems.\nThis kept tormenting me in my sleep, I would wake up in cold sweat and to never sleep again!\nJokes aside, this problem was bothering me. But it came to me that the solution was pretty simple.\nCode (setq ispell-program-name \u0026quot;hunspell\u0026quot;) (setq ispell-dictionary \u0026quot;en_US,pt_PT\u0026quot;) (ispell-set-spellchecker-params) (ispell-hunspell-add-multi-dic \u0026quot;en_US,pt_PT\u0026quot;) (setq ispell-personal-dictionary \u0026quot;~/.config/doom/.hunspell_per_dic\u0026quot;)  or if you want to make sure it loads after ispell:\n(with-eval-after-load \u0026quot;ispell\u0026quot; (setq ispell-program-name \u0026quot;hunspell\u0026quot;) (setq ispell-dictionary \u0026quot;en_US,pt_PT\u0026quot;) (ispell-set-spellchecker-params) (ispell-hunspell-add-multi-dic \u0026quot;en_US,pt_PT\u0026quot;) (setq ispell-personal-dictionary \u0026quot;~/.config/doom/.hunspell_per_dic\u0026quot;) )  Why Hunspell For those people asking: \u0026ldquo;Why are you using Hunspell? Aspell is much better\u0026rdquo;\nWell, I am using Hunspell for this tutorial because it is still supported, Aspell has fallen down the pit of unsupported software. Besides, if LibreOffice uses it, it must be good enough for Emacs!\n","date":"2022-07-03","permalink":"https://psi-blog.github.io/post/emacs-dictionary/","tags":["Emacs","Programming"],"title":"Emacs Multiple Dictionaries"},{"content":"Hello there This is the first post of this blog and I would like to present myself:\n  My name is Diogo Val√©rio\n  I\u0026rsquo;m a first year Computer Science student\n  I live in Portugal\n  I\u0026rsquo;m a hobbyist programmer\n  Some programming languages that have caught my interest recently were rust and haskell. I\u0026rsquo;m very into functional programming. I\u0026rsquo;ve also messed a little with lisp and clojure.\nI\u0026rsquo;m a Linux power user and a FOSS advocate. I\u0026rsquo;m a PC gamer and I\u0026rsquo;m also interested in Game Development.\n","date":"2022-07-03","permalink":"https://psi-blog.github.io/post/first-blog/","tags":["Programming","Gaming"],"title":"First Post"}]