[{"content":"Have you ever wondered what is functional programming? This big buzz word everyone is talking about?\nWhat is Functional Programming? In Functional Programming everything is implemented using functions.\nFunctions are pieces of code which may receive some input value(parameters) and may return some output value.\nIn this case we have the say_hello function which has no parameters and no output value, this function prints to the screen \u0026ldquo;hello world\u0026rdquo;.\nRust Example:\nfn say_hello(){ println!(\u0026quot;hello world\u0026quot;); }  Haskell Example:\nsay_hello = putStrLn \u0026quot;hello world\u0026quot;  And in this case we have the function add_one which has an input value num of the type i32 and returns that value plus 1.\nRust Example:\nfn add_one(num:i32) -\u0026gt; i32{ return (num + 1); }  Haskell Example:\naddOne x = x+1  Why use Functional Programming? Functional programming is one of the simplest programming paradigms and in most cases it\u0026rsquo;s speed is unmatched by the other programming paradigms, such as Object Oriented Programming.\nThe implementations are often cleaner and more concise, and it allows the developers to think about a problem in other angle.\n","date":"2022-12-28","permalink":"https://psi-blog.github.io/post/functional_prg/","tags":["Rust","Programming","Haskell"],"title":"Functional Programming in Rust and Haskell"},{"content":"Today I was experimenting with Haskell and this error struck me:\n X Could not find Module Prelude\nThere are files missing in the base-x-x-x package,\n This has an easy fix:\nInstall the ghc-static package\nsudo pacman -S ghc-static  Then all should compile easily.\n","date":"2022-07-12","permalink":"https://psi-blog.github.io/post/prelude_ghc_fix/","tags":["Haskell","Fix","Programming"],"title":"X Could not find Module `Prelude` fix"},{"content":"Emacs is really a nice tool to work with if you are a developer or even a writer. It\u0026rsquo;s modes are incredibly versatile and never cease to amaze me.\nSome days ago I found myself in a conundrum, my Emacs config only supported one dictionary at a time.\nDictionary Plugins This dictionary plugins are really a life saver because they \u0026ldquo;lint\u0026rdquo; your text and help you find other words that are similar to the one you wrote incorrectly. Things that other code editors don\u0026rsquo;t have for writing $\\LaTeX$ or Markdown\nThis is very frustrating if you write school papers/essays in your home language and write something in other language.\nI would really take the effort of changing the dictionary language in my config every-time if there was no other way. But I\u0026rsquo;m a pro-programmer/procrastinator, and we are known for spending hours over-engineering solutions to very simple problems.\nThis kept tormenting me in my sleep, I would wake up in cold sweat and to never sleep again!\nJokes aside, this problem was bothering me. But it came to me that the solution was pretty simple.\nCode (setq ispell-program-name \u0026quot;hunspell\u0026quot;) (setq ispell-dictionary \u0026quot;en_US,pt_PT\u0026quot;) (ispell-set-spellchecker-params) (ispell-hunspell-add-multi-dic \u0026quot;en_US,pt_PT\u0026quot;) (setq ispell-personal-dictionary \u0026quot;~/.config/doom/.hunspell_per_dic\u0026quot;)  or if you want to make sure it loads after ispell:\n(with-eval-after-load \u0026quot;ispell\u0026quot; (setq ispell-program-name \u0026quot;hunspell\u0026quot;) (setq ispell-dictionary \u0026quot;en_US,pt_PT\u0026quot;) (ispell-set-spellchecker-params) (ispell-hunspell-add-multi-dic \u0026quot;en_US,pt_PT\u0026quot;) (setq ispell-personal-dictionary \u0026quot;~/.config/doom/.hunspell_per_dic\u0026quot;) )  Why Hunspell For those people asking: \u0026ldquo;Why are you using Hunspell? Aspell is much better\u0026rdquo;\nWell, I am using Hunspell for this tutorial because it is still supported, Aspell has fallen down the pit of unsupported software. Besides, if LibreOffice uses it, it must be good enough for Emacs!\n","date":"2022-07-03","permalink":"https://psi-blog.github.io/post/emacs-dictionary/","tags":["Emacs","Programming"],"title":"Emacs Multiple Dictionaries"},{"content":"Hello there This is the first post of this blog and I would like to present myself:\n  My name is Diogo Val√©rio\n  I\u0026rsquo;m a first year Computer Science student\n  I live in Portugal\n  I\u0026rsquo;m a hobbyist programmer\n  Some programming languages that have caught my interest recently were rust and haskell. I\u0026rsquo;m very into functional programming. I\u0026rsquo;ve also messed a little with lisp and clojure.\nI\u0026rsquo;m a Linux power user and a FOSS advocate. I\u0026rsquo;m a PC gamer and I\u0026rsquo;m also interested in Game Development.\n","date":"2022-07-03","permalink":"https://psi-blog.github.io/post/first-blog/","tags":["Programming","Gaming"],"title":"First Post"},{"content":"How to create a chess app in flutter  In this post, I\u0026rsquo;m going to explain how to create a basic chess app with Flutter. For this app I used the RiverPod state manager, you probably already know what it is, if not, just click on this link to learn more about it.\nCreating the project To create a Flutter project we simply write:\nflutter create chess_app  How to create a chess board app in flutter First of all to create a chess we need the chessboard, for that, fortunately Deven Joshi created a package/widget that allows us to create and play in a chessboard, that is called flutter_chess_board package.\n1. Installing the package To install the package to your flutter app, just run:\nflutter pub add flutter_chess_board  2. Creating the chessboard With this package it\u0026rsquo;s really easy to create a chessboard.\n First of all, in the main.dart file add the installed package using:  import 'package:flutter_chess_board/flutter_chess_board.dart';   Then (after adding the material.dart package), I created a new statelessWidget called ChessApp, and added the ChessBoard Widget, in the end the file was like this:  main.dart\nimport 'package:flutter/material.dart'; import 'package:flutter_chess_board/flutter_chess_board.dart'; class ChessApp extends StatelessWidget { const ChessApp({super.key}); @override Widget build(BuildContext context) { return MaterialApp( themeMode: ThemeMode.system, debugShowCheckedModeBanner: false, title: 'Chess App', theme: ThemeData( brightness: Brightness.dark, primaryColorDark: primaryColor, ), home: const ChessBoard(title: 'Chess App'), ); } } class ChessBoard extends StatefulWidget { const ChessBoard({super.key, required this.title}); final String title; @override ChessBoardState createState() =\u0026gt; ChessBoardState(); } class MyHomePageState extends State\u0026lt;ChessBoard\u0026gt;{ // Color theme variables const Color labelText = Color.fromRGBO(180, 180, 180, 1); const Color primaryColor = Color.fromRGBO(24, 24, 24, 1); const Color appBarBg = Color.fromRGBO(48, 48, 48, 1); ChessBoardController chessBoardController = ChessBoardController(); List\u0026lt;String?\u0026gt; sanList = ['']; @override void initState() { super.initState(); chessBoardController.addListener(() { setState(() { sanList = chessBoardController.getSan(); }); }); } @override void dispose() { super.dispose(); chessBoardController.dispose(); } return Scaffold( backgroundColor: Theme.of(context).primaryColorDark, appBar: AppBar( title: Text( widget.title, style: const TextStyle(color: labelText, fontWeight: FontWeight.bold), ), backgroundColor: appBarBg, ), body: SafeArea( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Container( margin: const EdgeInsets.only(top: 10, left: 4, right: 4), // Creates a scrollable horizontal list child: SingleChildScrollView( // Scrolls automatically when a new item is added reverse: true, scrollDirection: Axis.horizontal, // Shows a text of moves that were made child: RichText( text: sanList.isNotEmpty ? TextSpan(children: \u0026lt;TextSpan\u0026gt;[ TextSpan( text: sanList.take(sanList.length - 1).join(\u0026quot; \u0026quot;), style: const TextStyle(color: labelText)), TextSpan( text: ' ${sanList.last}', style: const TextStyle(fontWeight: FontWeight.bold)), ]) : const TextSpan(text: \u0026quot;\u0026quot;), ), ), ), _buildChessBoard(), ], ), ), );what is a san in chess }  _buildChessBoard()\nWidget _buildChessBoard() { return Column( children: [ ChessBoard( size: MediaQuery.of(context).size.width, controller: chessBoardController, boadOrientation: PlayerColor.white, boadColor: BoardColor.darkBrown, ), ], ); }  Let\u0026rsquo;s break it down:\n chessBoard has aChessBoardController widget, which is responsible for manipulating the chessboard programmatically. ChessBoard widget, creates the chessboard. boardOrientation: defines the orientation of the chessboard, meaning it can be chance the white pieces to show at the bottom and the black ones at the top, and vise-versa. boardColor: defines the color of the chessboard.  That\u0026rsquo;s all we need to create a playable chessboard. But I also thought it would be nice to add the ability to see the chess moves. For that, we want to access the chessboard SAN.\nWhat\u0026rsquo;s a SAN? Well a SAN stands for Standard Algebraic Notation. It\u0026rsquo;s basically a notation that allows you to know what moves were made during a chess game. Fortunately the chessBoardController has SAN list that we can use in our code. To get it we used the getSan() function.\nThe chessBoardController also has a function that always listens to game changes, which we used, in the code, to update the sanList list variable, every time a change is detected.\nSo, in the end, you have something looking like this:\nThe flutter_chess_board package allows you to do many others things. If you want you can add a timer, a back e forth button, a pause button, and many more things to make it look like Chess.com or lichess.\nI hope you like this article, see you next time!\n","date":"0001-01-01","permalink":"https://psi-blog.github.io/post/chess_app/","tags":["Flutter","App","Chess","Programming"],"title":"How to create a chess app in flutter"}]