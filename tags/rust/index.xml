<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on PSI Blog</title><link>https://psi-blog.github.io/tags/rust/</link><description>Recent content in Rust on PSI Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 28 Dec 2022 01:50:42 +0100</lastBuildDate><atom:link href="https://psi-blog.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming in Rust and Haskell</title><link>https://psi-blog.github.io/post/functional_prg/</link><pubDate>Wed, 28 Dec 2022 01:50:42 +0100</pubDate><guid>https://psi-blog.github.io/post/functional_prg/</guid><description>Have you ever wondered what is functional programming? This big buzz word everyone is talking about?
What is Functional Programming? In Functional Programming everything is implemented using functions.
Functions are pieces of code which may receive some input value(parameters) and may return some output value.
In this case we have the say_hello function which has no parameters and no output value, this function prints to the screen &amp;ldquo;hello world&amp;rdquo;.
Rust Example:
fn say_hello(){ println!(&amp;quot;hello world&amp;quot;); } Haskell Example:
say_hello = putStrLn &amp;quot;hello world&amp;quot; And in this case we have the function add_one which has an input value num of the type i32 and returns that value plus 1.</description></item></channel></rss>